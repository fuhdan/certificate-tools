================================================================================
APACHE SSL CERTIFICATE INSTALLATION GUIDE
================================================================================

Domain: {domain_name}
Generated: {timestamp}

üìù BEFORE STARTING:
- Check the CONTENT_MANIFEST.txt file for certificate details, passwords, and file hashes
- All certificate files are included in this ZIP bundle
- Installation requires root/administrator privileges

================================================================================
STEP 1: PREPARE CERTIFICATE FILES
================================================================================

1.1) Upload your certificate files to the server:
   Linux/Ubuntu/CentOS:
   sudo mkdir -p /etc/ssl/certs
   sudo mkdir -p /etc/ssl/private

   Red Hat/RHEL/Fedora:
   sudo mkdir -p /etc/pki/tls/certs
   sudo mkdir -p /etc/pki/tls/private

1.2) Copy your certificate files:
   # Primary certificate
   sudo cp {certificate_filename} /etc/ssl/certs/
   
   # Private key (SECURE THIS FILE!)
   sudo cp {private_key_filename} /etc/ssl/private/
   
   # Certificate chain/bundle (if applicable)
   sudo cp {certificate_chain_filename} /etc/ssl/certs/

1.3) Set secure file permissions:
   # Certificate files (readable by all)
   sudo chmod 644 /etc/ssl/certs/{certificate_filename}
   sudo chmod 644 /etc/ssl/certs/{certificate_chain_filename}
   
   # Private key (readable only by root)
   sudo chmod 600 /etc/ssl/private/{private_key_filename}
   sudo chown root:root /etc/ssl/private/{private_key_filename}

================================================================================
STEP 2: ENABLE SSL MODULE AND CONFIGURE APACHE
================================================================================

2.1) Enable required Apache modules:
   Ubuntu/Debian:
   sudo a2enmod ssl
   sudo a2enmod rewrite
   sudo a2enmod headers
   
   CentOS/RHEL/Fedora:
   # SSL module usually enabled by default
   # If not, ensure mod_ssl is installed:
   sudo yum install mod_ssl    # CentOS 7/RHEL 7
   sudo dnf install mod_ssl    # CentOS 8+/RHEL 8+/Fedora

2.2) Create or edit your virtual host configuration:
   Ubuntu/Debian:
   sudo nano /etc/apache2/sites-available/{domain_name}-ssl.conf
   
   CentOS/RHEL/Fedora:
   sudo nano /etc/httpd/conf.d/{domain_name}-ssl.conf

2.3) Add the following SSL virtual host configuration:

<VirtualHost *:443>
    ServerName {domain_name}
    ServerAlias www.{domain_name}
    DocumentRoot /var/www/html/{domain_name}

    # SSL Configuration
    SSLEngine on
    SSLCertificateFile /etc/ssl/certs/{certificate_filename}
    SSLCertificateKeyFile /etc/ssl/private/{private_key_filename}
    SSLCertificateChainFile /etc/ssl/certs/{certificate_chain_filename}

    # Modern SSL/TLS Security Settings
    SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
    SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    SSLHonorCipherOrder off
    SSLSessionTickets off

    # DH parameters for perfect forward secrecy
    SSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem

    # Security Headers
    Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    Header always set X-Frame-Options DENY
    Header always set X-Content-Type-Options nosniff
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
    Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';"

    # OCSP Stapling (optional but recommended)
    SSLUseStapling on
    SSLStaplingResponderTimeout 5
    SSLStaplingReturnResponderErrors off
    SSLStaplingCache shmcb:/var/cache/mod_ssl/stapling(32768)

    # Performance optimizations
    # Enable compression
    LoadModule deflate_module modules/mod_deflate.so
    <Location />
        SetOutputFilter DEFLATE
        SetEnvIfNoCase Request_URI \
            \.(?:gif|jpe?g|png)$ no-gzip dont-vary
        SetEnvIfNoCase Request_URI \
            \.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary
    </Location>

    # Browser caching for static files
    <LocationMatch "\.(css|js|png|jpg|jpeg|gif|ico|svg)$">
        ExpiresActive On
        ExpiresDefault "access plus 1 year"
        Header append Cache-Control "public"
    </LocationMatch>

    # Logging
    ErrorLog ${APACHE_LOG_DIR}/{domain_name}_ssl_error.log
    CustomLog ${APACHE_LOG_DIR}/{domain_name}_ssl_access.log combined
</VirtualHost>

# HTTP to HTTPS redirect
<VirtualHost *:80>
    ServerName {domain_name}
    ServerAlias www.{domain_name}
    
    # Redirect all HTTP traffic to HTTPS
    RewriteEngine On
    RewriteCond %{HTTPS} off
    RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
</VirtualHost>

# Global SSL Cache and Performance Settings (add to main Apache config)
SSLSessionCache shmcb:/var/cache/mod_ssl/scache(512000)
SSLSessionCacheTimeout 300
SSLStaplingCache shmcb:/var/cache/mod_ssl/stapling(32768)

# Enable required modules for optimization
LoadModule expires_module modules/mod_expires.so
LoadModule headers_module modules/mod_headers.so

================================================================================
STEP 3: TEST CONFIGURATION AND RESTART
================================================================================

3.1) Test Apache configuration syntax:
   Ubuntu/Debian:
   sudo apache2ctl configtest
   
   CentOS/RHEL/Fedora:
   sudo httpd -t

3.2) Enable the SSL site (Ubuntu/Debian only):
   sudo a2ensite {domain_name}-ssl.conf

3.3) Restart Apache:
   Ubuntu/Debian:
   sudo systemctl restart apache2
   
   CentOS/RHEL/Fedora:
   sudo systemctl restart httpd

3.4) Enable Apache to start on boot:
   sudo systemctl enable apache2    # Ubuntu/Debian
   sudo systemctl enable httpd      # CentOS/RHEL/Fedora

================================================================================
STEP 4: VERIFY SSL INSTALLATION
================================================================================

4.1) Check Apache status:
   sudo systemctl status apache2    # Ubuntu/Debian
   sudo systemctl status httpd      # CentOS/RHEL/Fedora

4.2) Test SSL connection locally:
   openssl s_client -connect {domain_name}:443 -servername {domain_name}

4.3) Check certificate details:
   openssl s_client -connect {domain_name}:443 -servername {domain_name} | openssl x509 -noout -text

4.4) Verify certificate chain:
   openssl s_client -connect {domain_name}:443 -servername {domain_name} -showcerts

4.5) Online SSL testing tools:
   - SSL Labs: https://www.ssllabs.com/ssltest/
   - SSL Checker: https://www.sslshopper.com/ssl-checker.html

================================================================================
TROUBLESHOOTING
================================================================================

Common Issues:

1) "SSL_ERROR_BAD_CERT_DOMAIN":
   - Verify ServerName matches certificate CN/SAN
   - Check certificate is valid for the domain

2) "Certificate not trusted":
   - Ensure certificate chain/intermediate certificates are installed
   - Verify SSLCertificateChainFile points to correct bundle

3) "Permission denied" errors:
   - Check file permissions: certificates 644, private key 600
   - Verify Apache user can read certificate files
   - Check SELinux contexts (CentOS/RHEL)

4) Apache won't start:
   - Check error logs: sudo tail -f /var/log/apache2/error.log
   - Verify all certificate files exist and are readable
   - Test configuration: sudo apache2ctl configtest

5) Mixed content warnings:
   - Update internal links to use HTTPS
   - Configure proper redirects from HTTP to HTTPS

6) OCSP Stapling issues:
   - Verify SSLStaplingCache is configured
   - Check network connectivity to OCSP responder
   - Test manually: openssl ocsp -url [OCSP_URL] -resp_text

Diagnostic Commands:
   # Check certificate expiration
   openssl x509 -in /etc/ssl/certs/{certificate_filename} -noout -dates
   
   # Verify private key matches certificate
   openssl rsa -in /etc/ssl/private/{private_key_filename} -noout -modulus | openssl md5
   openssl x509 -in /etc/ssl/certs/{certificate_filename} -noout -modulus | openssl md5
   
   # Check Apache modules
   apache2ctl -M | grep ssl    # Ubuntu/Debian
   httpd -M | grep ssl         # CentOS/RHEL
   
   # View Apache error logs
   sudo tail -f /var/log/apache2/error.log    # Ubuntu/Debian
   sudo tail -f /var/log/httpd/error_log      # CentOS/RHEL

   # Test SSL configuration locally
   openssl s_client -connect localhost:443 -servername {domain_name}

Performance Tuning:
   # Check SSL session reuse
   echo | openssl s_client -connect {domain_name}:443 -reconnect 2>/dev/null | grep -A1 "Session-ID"
   
   # Monitor SSL performance
   sudo tail -f /var/log/apache2/{domain_name}_ssl_access.log

SELinux (CentOS/RHEL):
   # Allow Apache to read SSL certificates
   sudo setsebool -P httpd_can_network_connect 1
   sudo restorecon -R /etc/ssl/
   sudo restorecon -R /etc/pki/tls/

   # Check SELinux contexts
   ls -Z /etc/ssl/certs/{certificate_filename}
   ls -Z /etc/ssl/private/{private_key_filename}

================================================================================
PERFORMANCE OPTIMIZATION
================================================================================

Additional optimizations for high-traffic sites:

1) SSL Session Resumption:
   SSLSessionCache shared:SSL:50m
   SSLSessionTimeout 1d

2) Enable mod_http2 for HTTP/2 support:
   Ubuntu/Debian: sudo a2enmod http2
   CentOS/RHEL: LoadModule http2_module modules/mod_http2.so
   
   # Add to VirtualHost
   Protocols h2 http/1.1

3) Enable Brotli Compression (if available):
   Ubuntu/Debian: sudo a2enmod brotli
   
   # Add to VirtualHost
   <Location />
       BrotliCompressionLevel 6
       BrotliFilter on
   </Location>

4) Rate Limiting:
   LoadModule evasive24_module modules/mod_evasive24.so
   
   # Add configuration
   DOSHashTableSize 4096
   DOSPageCount 3
   DOSSiteCount 50
   DOSPageInterval 1
   DOSSiteInterval 1
   DOSBlockingPeriod 600

================================================================================
SECURITY BEST PRACTICES
================================================================================

1) Keep Apache updated:
   Ubuntu/Debian: sudo apt update && sudo apt upgrade apache2
   CentOS/RHEL:   sudo yum update httpd (CentOS 7)
                  sudo dnf update httpd (CentOS 8+/Rocky Linux)

2) Configure proper firewall rules:
   Ubuntu/Debian: sudo ufw allow 'Apache Full'
   CentOS/RHEL:   sudo firewall-cmd --permanent --add-service=http
                  sudo firewall-cmd --permanent --add-service=https
                  sudo firewall-cmd --reload

3) Hide Apache version information:
   # Add to main Apache config
   ServerTokens Prod
   ServerSignature Off

4) Regularly review access logs for suspicious activity:
   sudo tail -f /var/log/apache2/{domain_name}_ssl_access.log

5) Consider implementing fail2ban for additional security:
   sudo apt install fail2ban    # Ubuntu/Debian
   sudo yum install fail2ban    # CentOS/RHEL

================================================================================
SUPPORT RESOURCES
================================================================================

- Apache SSL/TLS Documentation: https://httpd.apache.org/docs/2.4/ssl/
- Mozilla SSL Configuration Generator: https://ssl-config.mozilla.org/
- SSL/TLS Best Practices: https://wiki.mozilla.org/Security/Server_Side_TLS
- Apache Virtual Host Documentation: https://httpd.apache.org/docs/2.4/vhosts/

For additional support, consult your system administrator or hosting provider.

================================================================================
INSTALLATION COMPLETE
================================================================================

Your SSL certificate should now be installed and active. 
Visit https://{domain_name} to verify the installation.

Generated: {timestamp}