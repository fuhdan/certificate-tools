================================================================================
NGINX SSL CERTIFICATE INSTALLATION GUIDE
================================================================================

Certificate Information:
- Certificate File: {certificate_filename}
- Private Key File: {private_key_filename}
- Certificate Chain: {certificate_chain_filename}
- Domain Name: {domain_name}
- Certificate Type: {certificate_type}
- Validity Period: {validity_period}

⚠️  SECURITY WARNING:
- Keep your private key file secure and never share it
- Ensure proper file permissions are set (600 for private key)
- Use strong SSL/TLS configurations
- Regularly update Nginx and OpenSSL
- Backup your certificates and keys securely

================================================================================
STEP 1: PREPARE CERTIFICATE FILES
================================================================================

1.1) Create SSL directories:
   sudo mkdir -p /etc/nginx/ssl/certs
   sudo mkdir -p /etc/nginx/ssl/private

   Alternative locations:
   sudo mkdir -p /etc/ssl/certs
   sudo mkdir -p /etc/ssl/private

1.2) Upload and copy certificate files:
   # Primary certificate (or combined certificate + chain)
   sudo cp {certificate_filename} /etc/nginx/ssl/certs/
   
   # Private key (SECURE THIS FILE!)
   sudo cp {private_key_filename} /etc/nginx/ssl/private/
   
   # Certificate chain/bundle (if separate)
   sudo cp {certificate_chain_filename} /etc/nginx/ssl/certs/

1.3) Combine certificate and chain (if needed):
   # If you have separate certificate and chain files, combine them:
   sudo cat /etc/nginx/ssl/certs/{certificate_filename} /etc/nginx/ssl/certs/{certificate_chain_filename} > /etc/nginx/ssl/certs/{domain_name}-fullchain.pem

1.4) Set secure file permissions:
   # Certificate files (readable by nginx user)
   sudo chmod 644 /etc/nginx/ssl/certs/{certificate_filename}
   sudo chmod 644 /etc/nginx/ssl/certs/{certificate_chain_filename}
   
   # Private key (readable only by root and nginx)
   sudo chmod 600 /etc/nginx/ssl/private/{private_key_filename}
   sudo chown root:nginx /etc/nginx/ssl/private/{private_key_filename}

1.5) Verify file ownership:
   sudo chown -R root:nginx /etc/nginx/ssl/
   sudo find /etc/nginx/ssl/ -type d -exec chmod 755 {} \;

================================================================================
STEP 2: GENERATE DHPARAM (RECOMMENDED)
================================================================================

2.1) Generate strong DH parameters (this may take several minutes):
   sudo openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048

   # For extra security (takes longer):
   sudo openssl dhparam -out /etc/nginx/ssl/dhparam.pem 4096

2.2) Set permissions:
   sudo chmod 644 /etc/nginx/ssl/dhparam.pem

================================================================================
STEP 3: CONFIGURE NGINX SERVER BLOCK
================================================================================

3.1) Create or edit your site configuration:
   sudo nano /etc/nginx/sites-available/{domain_name}

   # Alternative path (CentOS/RHEL):
   sudo nano /etc/nginx/conf.d/{domain_name}.conf

3.2) Add the following server block configuration:

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name {domain_name} www.{domain_name};
    
    # Security headers for HTTP
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    
    # Redirect all HTTP traffic to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS server block
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name {domain_name} www.{domain_name};
    
    # Document root
    root /var/www/{domain_name};
    index index.html index.htm index.php;

    # SSL Certificate Configuration
    ssl_certificate /etc/nginx/ssl/certs/{certificate_filename};
    ssl_certificate_key /etc/nginx/ssl/private/{private_key_filename};
    
    # SSL/TLS Security Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # SSL session settings
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # DH parameters
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/nginx/ssl/certs/{certificate_chain_filename};
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;

    # Performance Optimizations
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/json;

    # Browser caching for static files
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Basic PHP support (if needed)
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Adjust PHP version as needed
        fastcgi_param HTTPS on;
    }

    # Security: Hide sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Logging
    access_log /var/log/nginx/{domain_name}-access.log;
    error_log /var/log/nginx/{domain_name}-error.log;
}

================================================================================
STEP 4: ENABLE SITE AND TEST CONFIGURATION
================================================================================

4.1) Test Nginx configuration:
   sudo nginx -t

4.2) Enable the site (Ubuntu/Debian):
   sudo ln -s /etc/nginx/sites-available/{domain_name} /etc/nginx/sites-enabled/
   
   # Remove default site if present
   sudo rm -f /etc/nginx/sites-enabled/default

4.3) For CentOS/RHEL, the conf.d files are automatically included.

4.4) Check Nginx configuration again:
   sudo nginx -t

================================================================================
STEP 5: RESTART NGINX AND ENABLE AUTO-START
================================================================================

5.1) Restart Nginx:
   sudo systemctl restart nginx

5.2) Check Nginx status:
   sudo systemctl status nginx

5.3) Enable Nginx to start on boot:
   sudo systemctl enable nginx

================================================================================
STEP 6: VERIFY SSL INSTALLATION
================================================================================

6.1) Test SSL connection locally:
   openssl s_client -connect {domain_name}:443 -servername {domain_name}

6.2) Check certificate details:
   echo | openssl s_client -connect {domain_name}:443 -servername {domain_name} 2>/dev/null | openssl x509 -noout -text

6.3) Test certificate chain:
   openssl s_client -connect {domain_name}:443 -servername {domain_name} -showcerts

6.4) Verify HTTP to HTTPS redirect:
   curl -I http://{domain_name}

6.5) Online SSL testing tools:
   - SSL Labs: https://www.ssllabs.com/ssltest/
   - SSL Checker: https://www.sslshopper.com/ssl-checker.html
   - Mozilla Observatory: https://observatory.mozilla.org/

================================================================================
TROUBLESHOOTING
================================================================================

Common Issues:

1) "SSL_ERROR_BAD_CERT_DOMAIN":
   - Verify server_name matches certificate CN/SAN
   - Check certificate covers all domains/subdomains

2) "Certificate chain incomplete":
   - Ensure ssl_certificate includes full chain
   - Combine certificate + intermediate certificates if needed

3) "Permission denied" errors:
   - Check file permissions: certificates 644, private key 600
   - Verify nginx user can read certificate files
   - Check SELinux contexts (CentOS/RHEL)

4) Nginx won't start:
   - Check error logs: sudo tail -f /var/log/nginx/error.log
   - Verify all certificate files exist and are valid
   - Test configuration: sudo nginx -t

5) Mixed content warnings:
   - Update internal links to use HTTPS
   - Check fastcgi_param HTTPS is set for PHP

6) OCSP Stapling issues:
   - Verify ssl_trusted_certificate points to CA bundle
   - Check DNS resolver settings
   - Test OCSP manually: openssl ocsp -url <ocsp_url> -resp_text

Diagnostic Commands:
   # Check certificate expiration
   openssl x509 -in /etc/nginx/ssl/certs/{certificate_filename} -noout -dates
   
   # Verify private key matches certificate
   openssl rsa -in /etc/nginx/ssl/private/{private_key_filename} -noout -modulus | openssl md5
   openssl x509 -in /etc/nginx/ssl/certs/{certificate_filename} -noout -modulus | openssl md5
   
   # Check Nginx modules
   nginx -V 2>&1 | grep -o with-http_ssl_module
   
   # View Nginx error logs
   sudo tail -f /var/log/nginx/error.log
   
   # Test SSL configuration
   openssl s_client -connect localhost:443 -servername {domain_name}

Performance Tuning:
   # Check SSL session reuse
   echo | openssl s_client -connect {domain_name}:443 -reconnect 2>/dev/null | grep -A1 "Session-ID"
   
   # Monitor SSL performance
   sudo tail -f /var/log/nginx/{domain_name}-access.log

SELinux (CentOS/RHEL):
   # Allow Nginx to read SSL certificates
   sudo setsebool -P httpd_can_network_connect 1
   sudo restorecon -R /etc/nginx/ssl/

================================================================================
PERFORMANCE OPTIMIZATION
================================================================================

Additional optimizations for high-traffic sites:

1) SSL Session Resumption:
   ssl_session_cache shared:SSL:50m;
   ssl_session_timeout 1d;

2) HTTP/2 Server Push (if applicable):
   http2_push_preload on;

3) Brotli Compression (if available):
   brotli on;
   brotli_comp_level 6;
   brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

4) Rate Limiting:
   limit_req_zone $binary_remote_addr zone=login:10m rate=10r/m;
   limit_req zone=login burst=20 nodelay;

================================================================================
SUPPORT RESOURCES
================================================================================

- Nginx SSL/TLS Documentation: https://nginx.org/en/docs/http/configuring_https_servers.html
- Mozilla SSL Configuration Generator: https://ssl-config.mozilla.org/
- SSL/TLS Best Practices: https://wiki.mozilla.org/Security/Server_Side_TLS
- Nginx Configuration Best Practices: https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/

For additional support, consult your system administrator or hosting provider.

================================================================================
INSTALLATION COMPLETE
================================================================================

Your SSL certificate should now be installed and active.
Visit https://{domain_name} to verify the installation.

Generated on: {timestamp}